目前我在做一个基于yolov5的检测工件质量的程序，现在考虑两种划分方案
一个是前后端分离的架构，使用网络传输，前端传输视频流给后端，后端返回坐标和检测的颜色，前端再渲染出来；
一个是前后端不分离的架构，程序直接读取视频流输入，然后输出结果在屏幕上。
现在就是老师想让我们考虑一个动态划分的方案重点展示计算划分方案对应用程序执行性能的影响以及动态计算划分的实现。
请给我一些建议，比如如何实现动态划分，又应该根据什么条件来选择使用哪种划分，如何做到所选用的划分方案的切换

选择划分方案的指标：
CPU占用率：占用率高的时候，本地性能不应该太好，可以切换到分离的划分方案
网络带宽：网络带宽占用过多，延迟高的时候可以转换本地划分
准确率：在错误率较高的情况下（短时间频繁纠错等）可以考虑切换为另一种划分
帧率：daemon进程动态检测帧率以及分辨率，在帧率较高的时候，本地处理压力大，CPU占用升高，可以考虑在超过一定阈值时换为前后端划分
分辨率：几乎同上。

daemon线程 ==> 检测cpu、网络带宽延迟、准确率、帧率、分辨率等
operator ==> 人工设置MODE

切换MODE为LOCAL、REMOTE模式：

          operator
            ||                      ==> LOCAL ==> "frame = self.detect_frame(frame)" ==> 本地模型处理
client ==> MODE ==> ObjectDetector                                                                          
            ||                      ==> REMOTE ==> "self.detect_frame_remote(frame)" ==> socket连接服务器处理
          daemon
